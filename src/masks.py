"""
Функция get_mask_card_number
принимает на вход номер карты и возвращает ее маску.
Номер карты замаскирован и отображается в формате
XXXX XX** **** XXXX, где X — это цифра номера.
То есть видны первые 6 цифр и последние 4 цифры,
остальные символы отображаются звездочками,
номер разбит по блокам по 4 цифры, разделенным пробелами.
Пример ввода:
7000792289606361
Пример вывода:
7000 79** **** 6361
"""
import re


def get_mask_card_number(card_number: str) -> str:
    """Функция маскировки номера банковской карты"""

    if card_number == "":
        raise AssertionError("Наберите номер банковской карты")
    if len(card_number) != 16:
        raise ValueError("Указан неверный формат номера банковской карты")
    if not card_number.isdigit():
        raise ValueError("Указан неверный формат номера банковской карты")
    return f"{card_number[:4]} {card_number[4:6]}** **** {card_number[-4:]}"


# if __name__ == "__main__":
# print(get_mask_card_number(str(7000792289606361)))

"""
Функция get_mask_account
принимает на вход номер счета и возвращает его маску.
Номер счета замаскирован и отображается в формате
**XXXX, где X — это цифра номера.
То есть видны только последние 4 цифры номера, а перед ними — две звездочки.
Пример ввода:
73654108430135874305
Пример вывода:
**4305
"""


def get_mask_account(account_number: str) -> str:
    """Функция маскировки номера счета банковской карты"""

    if len(''.join(c if c.isdigit() else '' for c in account_number)) != 20:
        raise ValueError("Указан неверный формат номера счета банковской карты")
    return "**" + account_number[-4:]


# if __name__ == "__main__":
#     print(get_mask_account(str(73654108430135874305)))
